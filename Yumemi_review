## 良かった点

- ダークモードに対応している
- Realmを利用している
- 結果表示にエフェクトをいれ工夫しています
- 履歴表示機能の追加

## 改善点

全体として
- GitHubのPullRequestを活用すると良いです、また1コミットでの変更内容が複数項目に渡っています
- 可読性が高くなく、ちょっとした変更でもdiffが多かったりと影響が多い印象です。たとえば、LocalDetailViewとOutputViewは同じ内容を含んでいます
- prefectures_fortuneApp や blood_type など、Swift Api Design Guidelineに沿っていない命名がおおいです、標準ではキャメルケースを推奨してます
https://www.swift.org/documentation/api-design-guidelines/
- コンパイラによるwarnが残っています、なるべく対応しましょう
- グローバル領域に関数が定義されています（convertToIntやToday、getFortune）、スコープを意識して宣言しましょう
- ViewがAPI用のHTTP_Bodyを作成していたり、各クラスの責務が曖昧です
- 不要なコメントが残っていたりインデントがバラバラになっています、コードフォーマット等を調べてみましょう
- RealmでObject定義の書き方が古いです、新しくなった情報をチェックしましょう
https://www.mongodb.com/docs/atlas/device-sdks/sdk/swift/quick-start/

画面について
- Stateが多いです。結果の画面は表示用のモデルがありますが、表示用のデータ、表示を制御するデータと、意識して分けると良いです。
- 誕生日の入力で数字以外も入力できてしまいます。validationでエラーが返ってくるので機能に問題ないが、事前に簡単なバリデーションまたは、DatePickerで日時のみを入力するとよいです。
- 年月日の入力欄が説明がplaceholderしかないので、一旦入力すると何の項目だったか、分かりずらいです
- 血液型も入力制限がなく大文字も対応していないです。入力補助としてPickerを活用しましょう
- エラー表示がありますが、メッセージが一律でエラー箇所が不明です。printでメッセージを表示していますが、ユーザからは見えません
- 色定義はAsset catalogでも設定できます
- 旧コードのコメントアウトは残す必要がある場合を除いて削除しましょう
- Routerがview(data:)で定義してあるため、dataを使わない画面に遷移する場合にも、不要なdataを生成しています

## その他
- Realmでmasterブランチを指定しています、特別な理由がなければ明示的なバージョン番号で指定しましょう
